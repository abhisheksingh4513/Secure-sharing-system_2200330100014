name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create test files
        run: |
          mkdir -p test_files
          python create_test_files.py
          
      - name: Run tests
        run: |
          python run_tests.py --coverage
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
          UPLOAD_DIRECTORY: "./test_uploads"
          SECRET_KEY: "test-secret-key"
          
      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/secure-file-sharing:latest

  # Uncomment for production deployment
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   
  #   steps:
  #     - name: Deploy to Production
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.PROD_HOST }}
  #         username: ${{ secrets.PROD_USERNAME }}
  #         key: ${{ secrets.PROD_SSH_KEY }}
  #         script: |
  #           cd /app/secure-file-sharing
  #           docker-compose -f docker-compose.prod.yml pull
  #           docker-compose -f docker-compose.prod.yml up -d
  #           docker system prune -af
