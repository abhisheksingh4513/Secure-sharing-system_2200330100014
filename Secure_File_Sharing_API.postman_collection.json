{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789abc",
		"name": "Secure File Sharing System API",
		"description": "Complete API collection for the secure file-sharing system with role-based access control",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Operations User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('ops_token', response.access_token);",
									"    pm.test('Operations login successful', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"} else {",
									"    pm.test('Operations login failed', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/ops-login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"ops-login"
							]
						},
						"description": "Login for Operations users who can upload files"
					},
					"response": []
				},
				{
					"name": "Client User Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('user_id', response.user_id);",
									"    pm.environment.set('verification_url', response.verification_url);",
									"    // Store the username for login",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.environment.set('client_username', requestBody.username);",
									"    pm.test('Client signup successful', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"} else {",
									"    pm.test('Client signup failed', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"client{{$timestamp}}@example.com\",\n    \"username\": \"testclient{{$timestamp}}\",\n    \"password\": \"password123\",\n    \"user_type\": \"client\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "Register a new client user who can download files"
					},
					"response": []
				},
				{
					"name": "Manual Email Verification (Demo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Email verification successful', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/manual-verify/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"manual-verify",
								"{{user_id}}"
							]
						},
						"description": "Manual email verification for demo purposes (replaces email click)"
					},
					"response": []
				},
				{
					"name": "Client User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('client_token', response.access_token);",
									"    pm.test('Client login successful', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"} else {",
									"    pm.test('Client login failed', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{client_username}}\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login for Client users who can download files"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for both user types"
		},
		{
			"name": "File Operations",
			"item": [
				{
					"name": "Upload File (Operations Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('file_id', response.id);",
									"    pm.test('File upload successful', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"} else {",
									"    pm.test('File upload failed', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ops_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_document.docx",
									"description": "Upload a .docx, .pptx, or .xlsx file"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/files/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"files",
								"upload"
							]
						},
						"description": "Upload files - Only Operations users can upload .pptx, .docx, .xlsx files"
					},
					"response": []
				},
				{
					"name": "List All Files (Client Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('File list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const files = pm.response.json();",
									"    if (files.length > 0) {",
									"        pm.environment.set('available_file_id', files[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{client_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/files/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"files",
								"list"
							]
						},
						"description": "List all uploaded files - Only Client users can access this"
					},
					"response": []
				},
				{
					"name": "Get Secure Download Link (Client Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('download_link', response.download_link);",
									"    pm.test('Download link generated', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"} else {",
									"    pm.test('Download link generation failed', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{client_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/files/get-download-link/{{file_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"files",
								"get-download-link",
								"{{file_id}}"
							]
						},
						"description": "Generate secure, encrypted download URL for a specific file - Only Client users"
					},
					"response": []
				},
				{
					"name": "Download File with Secure Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('File download successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('File content received', function () {",
									"    pm.expect(pm.response.responseSize).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}{{download_link}}",
							"host": [
								"{{base_url}}{{download_link}}"
							]
						},
						"description": "Download file using the secure, one-time-use encrypted URL"
					},
					"response": []
				},
				{
					"name": "Test Download Again (Should Fail - One-time Use)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Second download attempt should fail', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}{{download_link}}",
							"host": [
								"{{base_url}}{{download_link}}"
							]
						},
						"description": "Attempt to use the same download link again - should fail (one-time use)"
					},
					"response": []
				}
			],
			"description": "File upload and download operations with role-based access"
		},
		{
			"name": "Security Tests",
			"item": [
				{
					"name": "Try Upload as Client (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Client upload should be forbidden', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{client_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_document.docx"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/files/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"files",
								"upload"
							]
						},
						"description": "Security test: Client users should not be able to upload files"
					},
					"response": []
				},
				{
					"name": "Try List Files as Ops User (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Ops user file list should be forbidden', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ops_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/files/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"files",
								"list"
							]
						},
						"description": "Security test: Operations users should not be able to list/download files"
					},
					"response": []
				},
				{
					"name": "Try Invalid File Type Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid file type should be rejected', function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ops_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_file.txt",
									"description": "Upload an invalid file type (should fail)"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/files/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"files",
								"upload"
							]
						},
						"description": "Security test: Only .pptx, .docx, .xlsx files should be allowed"
					},
					"response": []
				},
				{
					"name": "Try Access Without Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthenticated access should be forbidden', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/files/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"files",
								"list"
							]
						},
						"description": "Security test: Endpoints should require authentication"
					},
					"response": []
				}
			],
			"description": "Security and access control tests"
		},
		{
			"name": "System Health",
			"item": [
				{
					"name": "API Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('API is healthy', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Check if the API server is running"
					},
					"response": []
				},
				{
					"name": "API Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/docs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"docs"
							]
						},
						"description": "Access the interactive API documentation"
					},
					"response": []
				}
			],
			"description": "System health and documentation endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}
